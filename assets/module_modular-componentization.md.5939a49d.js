import{_ as a,o as e,c as o,X as t}from"./chunks/framework.af6290ec.js";const p=JSON.parse('{"title":"模块化（工程化）和组件化区别","description":"","frontmatter":{},"headers":[],"relativePath":"module/modular-componentization.md","filePath":"module/modular-componentization.md"}'),n={name:"module/modular-componentization.md"},r=t('<h1 id="模块化-工程化-和组件化区别" tabindex="-1">模块化（工程化）和组件化区别 <a class="header-anchor" href="#模块化-工程化-和组件化区别" aria-label="Permalink to &quot;模块化（工程化）和组件化区别&quot;">​</a></h1><h2 id="_1-什么是组件" tabindex="-1">1.什么是组件 <a class="header-anchor" href="#_1-什么是组件" aria-label="Permalink to &quot;1.什么是组件&quot;">​</a></h2><p>拿 Vue 框架来举例，组件的出现，就是为了拆分 Vue 实例的代码量的，能够让我们以不同的组件，来划分不同的功能模块，将来我们需要什么样的功能，就可以去调用对应的组件即可；</p><h2 id="_2-组件化和模块化的不同" tabindex="-1">2.组件化和模块化的不同 <a class="header-anchor" href="#_2-组件化和模块化的不同" aria-label="Permalink to &quot;2.组件化和模块化的不同&quot;">​</a></h2><ul><li>模块化： 是从代码逻辑的角度进行划分的；方便代码分层开发，保证每个功能模块的职能单一；</li><li>组件化： 是从 UI 界面的角度进行划分的；前端的组件化，方便 UI 组件的重用；</li></ul>',5),i=[r];function l(_,d,c,s,m,u){return e(),o("div",null,i)}const f=a(n,[["render",l]]);export{p as __pageData,f as default};

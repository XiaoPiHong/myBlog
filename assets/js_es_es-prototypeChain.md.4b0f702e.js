import{_ as s,o as n,c as a,X as o}from"./chunks/framework.af6290ec.js";const p="/myBlog/assets/es-prototypeChain-1.b729dc7e.png",l="/myBlog/assets/es-prototypeChain-2.c8521d23.png",t="/myBlog/assets/es-prototypeChain-3.ce51460d.png",e="/myBlog/assets/es-prototypeChain-4.c369ba8c.png",r="/myBlog/assets/es-prototypeChain-5.9be0fe0d.png",u=JSON.parse('{"title":"javascript 原型","description":"","frontmatter":{},"headers":[],"relativePath":"js/es/es-prototypeChain.md","filePath":"js/es/es-prototypeChain.md"}'),c={name:"js/es/es-prototypeChain.md"},y=o(`<h1 id="javascript-原型" tabindex="-1">javascript 原型 <a class="header-anchor" href="#javascript-原型" aria-label="Permalink to &quot;javascript 原型&quot;">​</a></h1><h2 id="什么是原型" tabindex="-1">什么是原型 <a class="header-anchor" href="#什么是原型" aria-label="Permalink to &quot;什么是原型&quot;">​</a></h2><p>注意：理解原型之前首先要知道什么是<strong>构造函数</strong>。在 JavaScript 中，用 new 关键字来调用的函数，称为构造函数。构造函数首字母一般大写（规范）。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">//这就是一个非常普通的构造函数</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Person</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//那下面我就用这个构造函数来实例化一个对象</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> per </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Person</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//分别打印构造函数Person和实例对象per的所有属性和属性值</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">dir</span><span style="color:#A6ACCD;">(Person)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">dir</span><span style="color:#A6ACCD;">(per)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p><img src="`+p+`" alt=""></p><blockquote><p>可以看到：构造函数里面有一个 prototype 属性，实力对象里面有一个<strong>proto</strong>属性，这两个属性都叫原型，也叫原型对象。 需要注意的是：原型<strong>proto</strong>一般是给浏览器使用的，不是标准的属性，为什么这样说，因为 ie8 里面是没有这个属性的。而原型 prototype 才是程序员会使用到的，是一个标准的属性。</p></blockquote><h2 id="原型的指向" tabindex="-1">原型的指向 <a class="header-anchor" href="#原型的指向" aria-label="Permalink to &quot;原型的指向&quot;">​</a></h2><h3 id="实例对象的原型proto的指向" tabindex="-1">实例对象的原型<strong>proto</strong>的指向 <a class="header-anchor" href="#实例对象的原型proto的指向" aria-label="Permalink to &quot;实例对象的原型**proto**的指向&quot;">​</a></h3><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Person</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> per </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Person</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">per</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">__proto__ </span><span style="color:#89DDFF;">===</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Person</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//true</span></span></code></pre></div><p>在控制台中输出上面的语句会输出 true，所以这里我们通常就会说实例对象 per 的原型<strong>proto</strong>，指向了构造函数 Person 的原型 prototype。 <strong>所以就得出了一个结论：</strong> 实例对象的<strong>proto</strong>指向了构造函数的原型对象 prototype。</p><h3 id="构造函数的原型对象-prototype-的构造器的指向" tabindex="-1">构造函数的原型对象 prototype 的构造器的指向 <a class="header-anchor" href="#构造函数的原型对象-prototype-的构造器的指向" aria-label="Permalink to &quot;构造函数的原型对象 prototype 的构造器的指向&quot;">​</a></h3><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Person</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> per </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Person</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#FFCB6B;">Person</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">constructor </span><span style="color:#89DDFF;">===</span><span style="color:#A6ACCD;"> Person</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//true</span></span></code></pre></div><p><img src="`+l+'" alt="在这里插入图片描述"></p><p>而在原型对象 prototype 中，有一个属性 constructor 构造器,根据上面输出的结果我们通常就会说这个 constructor 构造器指向的就是自己所在的原型对象 prototype 所在的构造函数。 <strong>所以就也得出了一个结论：</strong> 构造函数的原型对象(prototype)中有一个 constructor 构造器,这个构造器指向的就是自己所在的原型对象所在的构造函数。</p><h2 id="构造函数与原型对象与实例对象三者的关系" tabindex="-1">构造函数与原型对象与实例对象三者的关系 <a class="header-anchor" href="#构造函数与原型对象与实例对象三者的关系" aria-label="Permalink to &quot;构造函数与原型对象与实例对象三者的关系&quot;">​</a></h2><p>好了，现在大概知道原型<strong>proto</strong>与原型 prototype 之间的关系、构造函数与原型之间的关系之后，我们就可以画出一个关系图（这些关系有什么用，下面 1.4 会说到），这样看的更明了： <img src="'+t+`" alt="在这里插入图片描述"></p><h2 id="原型的作用" tabindex="-1">原型的作用 <a class="header-anchor" href="#原型的作用" aria-label="Permalink to &quot;原型的作用&quot;">​</a></h2><p>原型有两个作用：1.实现数据共享；2.为了实现继承。</p><h3 id="数据共享" tabindex="-1">数据共享 <a class="header-anchor" href="#数据共享" aria-label="Permalink to &quot;数据共享&quot;">​</a></h3><p><strong>不好的方法：</strong></p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Person</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">name</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">eat</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">//人应该都有一个吃的方法 并且都属于人类</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">//那应该怎么写，才能让所有创建出来的实例对象都有这个吃的方法和这个人类的属性呢</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">//可以这样操作，在实例化对象的时候，传进去人类的属性和吃的方法</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">name</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">eat</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">eat</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">eat</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">吃</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> per </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Person</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">人类</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> eat)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(per</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">name)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//人类</span></span>
<span class="line"><span style="color:#A6ACCD;">per</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">eat</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 吃</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//总结：</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/*</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    上面的方法确实可以实现目的，但是会有两个缺点：</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    1.命名的问题，要是我们写代码的过程中命名冲突了，有两个eat的方法，那么后面的就会把前面的给覆盖了,所以很同意造成命名冲突的问题</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    2.要是我要创建1000个人的实例对象，就要反复的传1000次这个&#39;人类&#39;和eat的方法，十分烦琐</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    */</span></span></code></pre></div><p><strong>好的方法：利用原型来实现</strong></p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Person</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"><span style="color:#FFCB6B;">Person</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">name </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">人类</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#FFCB6B;">Person</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">eat</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">吃</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> per1 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Person</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> per2 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Person</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(per1</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">name)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//人类</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(per2</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">name)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//人类</span></span>
<span class="line"><span style="color:#A6ACCD;">per1</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">eat</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 吃</span></span>
<span class="line"><span style="color:#A6ACCD;">per2</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">eat</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 吃</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//总结：</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/*</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    上面的利用原型就完美的解决了之前的两个问题：</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    1.命名冲突的问题，因为它们根本就没有拿全局的变量；</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    2.需要反复传入参数的问题，因为写在prototype中的属性和方法都是共享的，每一个实例对象都可以访问到</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    */</span></span></code></pre></div><blockquote><p>理解： 这里要思考一下为什么实例对象中可以访问到构造函数原型 prototype 中的属性和方法呢，原因就是因为我们之前说的实例对象的原型<strong>proto</strong>指向了构造函数的原型 prototype; 实例对象使用的属性或者方法,先在实例中查找,找到了则直接使用,找不到，则去实例对象的<strong>proto</strong>指向的原型对象 prototype 中找,找到了则使用,找不到则报错。</p></blockquote><h3 id="实现继承" tabindex="-1">实现继承 <a class="header-anchor" href="#实现继承" aria-label="Permalink to &quot;实现继承&quot;">​</a></h3><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">//这是一个人的构造函数</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Person</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"><span style="color:#FFCB6B;">Person</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">name </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">人类</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#FFCB6B;">Person</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">eat</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">吃</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//这是一个老师的构造函数</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Teacher</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//老师是属于人类的范畴，那么老师也肯定是有 人类和吃 的属性或方法</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//那么我们要重新给老师的构造函数的原型添加这两个属性吗？</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//那肯定是不需要的，我们可以用继承来实现（而js实现继承的原理就是改变了原型prototype的指向）</span></span>
<span class="line"><span style="color:#FFCB6B;">Teacher</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Person</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//这样我们就改变了原型的指向</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> teacher </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Person</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(teacher</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">name)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//人类</span></span>
<span class="line"><span style="color:#A6ACCD;">teacher</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">eat</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//吃</span></span></code></pre></div><p>我们将 <strong>Teacher.prototype = new Person()</strong> 之后，如果输出 <strong>console.dir(Teacher)</strong> 构造函数你会发现如下图： <img src="`+e+`" alt="在这里插入图片描述"> js 实现继承的原理就是改变了原型 prototype 的指向，现在 Teacher 的 prototype 指向了 new Person()后的一个实例对象，所以我们用 Teacher 创建出来的实例对象，也是有 Person 构造函数的属性和方法的，这样就可以说 Teacher 继承了 Person。</p><h2 id="原型链" tabindex="-1">原型链 <a class="header-anchor" href="#原型链" aria-label="Permalink to &quot;原型链&quot;">​</a></h2><p><strong>原型链:</strong> 是一种关系,实例对象和原型对象 prototype 之间的关系,关系是通过原型<strong>proto</strong>来联系的。</p><p><strong>下面我们来推导出一整条原型链：</strong></p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Person</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> per </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Person</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">dir</span><span style="color:#A6ACCD;">(per)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">dir</span><span style="color:#A6ACCD;">(Person)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//实例对象中有__proto__原型</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//构造函数中有prototype原型</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//prototype是对象</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//所以,prototype这个对象中也有__proto__,那么指向了哪里</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//实例对象中的__proto__指向的是构造函数的prototype</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//所以,prototype这个对象中__proto__指向的应该是某个构造函数的原型prototype</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//打印一下下面的语句：</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//console.log(Person.prototype.__proto__);</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//console.log(Object.prototype)</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#FFCB6B;">Person</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">__proto__ </span><span style="color:#89DDFF;">===</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Object</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//true</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//由上面可以推出：Person.prototype.__proto__指向了Object.prototype</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//所以：</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//per实例对象的__proto__指向Person.prototype</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//Person.prototype的__proto__指向Object.prototype</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//Object.prototype的__proto__是null</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(per</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">__proto__ </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Person</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//true</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(per</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">__proto__</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">__proto__ </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Person</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">__proto__)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//true</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#FFCB6B;">Person</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">__proto__ </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Object</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//true</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#FFCB6B;">Object</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">__proto__)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//null</span></span></code></pre></div><p><strong>下面我们把这条原型链画出来：</strong><img src="`+r+'" alt="在这里插入图片描述"><strong>总结：</strong><strong>1.原型链：</strong> 是一种关系,实例对象和原型对象 prototype 之间的关系,关系是通过原型<strong>proto</strong>来联系的。 <strong>2.原型链最终指向是：</strong> 原型链最终的指向是 Object 的 prototype 中的<strong>proto</strong>是 null。</p>',32),D=[y];function F(A,C,i,g,_,h){return n(),a("div",null,D)}const f=s(c,[["render",F]]);export{u as __pageData,f as default};

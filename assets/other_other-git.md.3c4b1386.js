import{_ as s,o as a,c as p,X as l}from"./chunks/framework.af6290ec.js";const g=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"other/other-git.md","filePath":"other/other-git.md"}'),t={name:"other/other-git.md"},e=l('<h2 id="基本操作" tabindex="-1">基本操作 <a class="header-anchor" href="#基本操作" aria-label="Permalink to &quot;基本操作&quot;">​</a></h2><p>克隆远程服务器上的仓库</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">clone</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">仓库连接</span></span></code></pre></div><p>更新 git 最新版本</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">update-git-for-windows</span></span></code></pre></div><p>查看修改了文件的文件夹的状态</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">status</span></span></code></pre></div><p>生成一条日志流水（添加到 index 工作区）</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">add</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">文件名.后缀</span></span></code></pre></div><p>提交到 git 仓库（添加到 master 工作区）</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">commit</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-m</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">添加这个文件的信息（如：first commit）</span><span style="color:#89DDFF;">&quot;</span></span></code></pre></div><p>查看操作日志（可以看到 commit 记录的 id）（记录是倒序排列的）</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">log</span></span></code></pre></div><p>查看某条 commit 记录都做了什么</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">show</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">commit</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">的</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">id</span></span></code></pre></div><p>回滚到指定的 commit 记录</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">reset</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">commit</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">的</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">id</span></span></code></pre></div><p>提交到远端（github 里面可以看到修改的文件）</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">push</span></span></code></pre></div><p>github 生成 ssh key</p><p>1.在本地仓库进入 git bash</p><p>2.输入 ssh-keygen -t rsa -b 4096 -C &quot;注册 github 时的邮箱&quot;</p><p>3.一直按 enter</p><p>4.输入 clip &lt; ~/.ssh/id_rsa.pub（这个命令是复制密钥）</p><p>5.在 github 中添加即可（title 可写这个密钥是用于干什么）</p><h2 id="分支管理" tabindex="-1">分支管理 <a class="header-anchor" href="#分支管理" aria-label="Permalink to &quot;分支管理&quot;">​</a></h2><h3 id="_1-创建分支并切换到该分支" tabindex="-1">1.创建分支并切换到该分支 <a class="header-anchor" href="#_1-创建分支并切换到该分支" aria-label="Permalink to &quot;1.创建分支并切换到该分支&quot;">​</a></h3><p>注意：一般创建分支起的名字是对应项目的功能的，比如该功能是登录功能，起的名字就叫 login，完成了该功能再将该分支合并到主分支</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">checkout</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-b</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">分支的名字</span></span></code></pre></div><h3 id="_2-查看所有分支" tabindex="-1">2.查看所有分支 <a class="header-anchor" href="#_2-查看所有分支" aria-label="Permalink to &quot;2.查看所有分支&quot;">​</a></h3><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">branch</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-a</span></span></code></pre></div><h3 id="_3-查看当前分支" tabindex="-1">3.查看当前分支 <a class="header-anchor" href="#_3-查看当前分支" aria-label="Permalink to &quot;3.查看当前分支&quot;">​</a></h3><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">branch</span></span></code></pre></div><h3 id="_4-合并分支" tabindex="-1">4.合并分支 <a class="header-anchor" href="#_4-合并分支" aria-label="Permalink to &quot;4.合并分支&quot;">​</a></h3><p>1.提交代码到需要合并的分支</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">commit</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-m</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">信息</span><span style="color:#89DDFF;">&#39;</span></span></code></pre></div><p>2.先要切换到 master 分支</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">checkout</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">master</span></span></code></pre></div><p>3.合并分支（ 合并 login 分支里面的所有代码）</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">merge</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">login</span></span></code></pre></div><p>4.再把本地的代码推送到云端</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">push</span></span></code></pre></div><h3 id="_5-将本地的分支推送到云端" tabindex="-1">5.将本地的分支推送到云端 <a class="header-anchor" href="#_5-将本地的分支推送到云端" aria-label="Permalink to &quot;5.将本地的分支推送到云端&quot;">​</a></h3><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">push</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-u</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">origin</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">分支名称</span></span></code></pre></div><p>注意：一般做完一个功能是先做第四步合并分支，再做第五步将本地分支推送到云端</p><h3 id="_6-分支开发" tabindex="-1">6.分支开发 <a class="header-anchor" href="#_6-分支开发" aria-label="Permalink to &quot;6.分支开发&quot;">​</a></h3><p>1.在 master 分支上创建子分子 work_one</p><p>2.开发完之后，将本地的修改 commit 到 work_one 分支</p><p>3.在 work_one 分支拉去远程的 master 分支：git pull origin master</p><p>4.解决有冲突的文件再 commit 再 push</p><p>5.切换本地的 master 分支，合并 work_one 分支</p><p>6.删除 work_one 分支：git branch -d work_one</p><h2 id="解决冲突" tabindex="-1">解决冲突 <a class="header-anchor" href="#解决冲突" aria-label="Permalink to &quot;解决冲突&quot;">​</a></h2><p>1.不同的分支修改了相同的文件或别人创建了新文件或别人编辑了其它文件，一个人先 commit 之后 push 提交了，另一个人 commit 之后 push 不了，要先拉取别人先提交的代码</p><p>2.拉取之后就需要解决有冲突的文件，别人先提交创建的新文件或编辑的其它文件与你没有冲突 git 会自动帮你添加到暂存区，有冲突的文件需要你自己解决冲突，解决冲突之后要继续将这个解决冲突后的文件 add 添加到暂存区，重新与无冲突的新文件一起 commit（这里默认都是 Merge branch &#39;master&#39; of xxx，也可以自己修改；注意：如果都是一些不会影响到你的文件，你在终端 pull 之后编辑 commit 信息再 push 就行了不需要做什么，它们系统都会自动帮你 add 到暂存区的），这样就解决这个冲突了</p><p>3.最后再 push 提交到远程仓库</p><p>注意：解决冲突后，解决冲突的人本地会一下子增加 3 条记录，一条别人先添加的记录，一条自己添加的记录，一条解决冲突的记录（而远程仓库中两个人的提交加起来也是这 3 条记录，注意：第一条是第一个人提交的，第二第三条才是第二个人制造的）</p><p>第一种情况：</p><p>别人 新增/修改/删除 了文件并 push 了，你没有修改该文件并 commit 了，pull 之后，这个文件会自动添加到暂存区，只要填写解决冲突的 commit 就可以 push 了</p><p>第二种情况（最常见）：</p><p>别人修改了文件并 push 了，你也修改了该文件并 commit 了，pull 之后，需要解决冲突，然后再添加到暂存区，再填写 commit 就可以 push 了</p><p>第三种情况：</p><p>你删除并 commit 了别人修改并 push 的文件，pull 之后，可以选择保留你的删除/它们的更改，再添加到暂存区，再填写 commit 就可以 push 了</p><h2 id="stash-储藏" tabindex="-1">stash 储藏 <a class="header-anchor" href="#stash-储藏" aria-label="Permalink to &quot;stash 储藏&quot;">​</a></h2><p>1.将修改的文件存储起来</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">stash</span></span></code></pre></div><p>2.查看有没有存储的 stash</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">stash</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">list</span></span></code></pre></div><p>3.恢复，但是恢复后，stash 内容并不删除，你需要用 git stash drop stash@{0}来删除</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">stash</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">apply</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">stash@{</span><span style="color:#F78C6C;">0</span><span style="color:#C3E88D;">}</span></span></code></pre></div><p>4.恢复，恢复的同时把 stash 内容也删了</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">stash</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">pop</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">stash@{</span><span style="color:#F78C6C;">0</span><span style="color:#C3E88D;">}</span></span></code></pre></div><p>5.你可以多次 stash，恢复的时候，先用 git stash list 查看，然后恢复指定的 stash，用命令</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">stash</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">apply</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">stash@{</span><span style="color:#F78C6C;">0</span><span style="color:#C3E88D;">}</span></span></code></pre></div><p>stash 储藏注意事项：</p><p>1.修改了某文件并且 git stash 存起来了，然后再对该文件进行修改，且推送到远端，再 git stash pop stash@{0}恢复，会有冲突，因为相当于不同的人同时修改了该文件；</p><p>且该 stash 会被保留，因为可能会再次用到；</p><p>冲突需要自行解决（保留双方更改，添加暂存，再取消暂存即可）；</p><p>2.修改了某文件并且存起来了，然后再对其它文件修改，且推送到远端，再 git stash pop stash@{0}恢复，就可以了，不会发生冲突；</p><h2 id="tag-标签" tabindex="-1">tag 标签 <a class="header-anchor" href="#tag-标签" aria-label="Permalink to &quot;tag 标签&quot;">​</a></h2><p>1.tag 标签的作用是更方便查看提交的位置，类似于书签</p><p>2.git tag -a 标签的名称 -m &#39;标签的描述&#39; （打标签）</p><p>3.git tag -d 标签的名称 （删除标签）</p><p>4.git tag -a 标签的名称 55d8e71fc7d0b8cefbb4cbee339beb9d987d9b81 -m &#39;标签的描述&#39; （给指定的 commit 打标签）</p><p>5.git push origin 标签的名称 （推送当前标签到远端服务器）</p><p>6.git push origin --tags （推送本地所有标签到远端服务器）</p><p>7.git ls-remote --tags （查看远端服务器标签）</p><h2 id="git-子模块-submodule" tabindex="-1">git 子模块（submodule） <a class="header-anchor" href="#git-子模块-submodule" aria-label="Permalink to &quot;git 子模块（submodule）&quot;">​</a></h2><p>子模块就是在主仓库中可以嵌套另外一个子仓库，两个仓库相互独立，互不影响</p><p>1、git submodule add <a href="http://192.168.x.xx/FMS/Web.git" target="_blank" rel="noreferrer">http://192.168.x.xx/FMS/Web.git</a> project/fy/fms/Web（在 note 仓库中执行该命令，会自动拉取远程 Web 仓库到本地 note 目录中的 project/fy/fms 中，此时 Web 仓库就是 note 仓库的子模块，注意：fms 目录中不能包含 Web 这个目录）</p><p>2、git add .（暂存）</p><p>3、git commit -m &quot;Add submodule: project/fy/fms/Web&quot;（提交到远程 note 仓库）</p><p>4、注意：子模块每切换一次分支，主模块都会记录这个子模块的分支变更，这个变更是记录子模块当前分支的，这个变更可以按需求提交到远端仓库</p><p>5、注意：创建的子模块的变更并不会提交到主模块仓库，主模块只是记录了当前子模块的分支还是远程仓库地址，子模块的文件变更还是子模块单独管理</p><h2 id="包含子模块的项目应该如何拉取" tabindex="-1">包含子模块的项目应该如何拉取 <a class="header-anchor" href="#包含子模块的项目应该如何拉取" aria-label="Permalink to &quot;包含子模块的项目应该如何拉取&quot;">​</a></h2><p>1、先正常拉取主模块</p><p>2、再初始化本地的子模块配置：git submodule init</p><p>3、再拉取所有子模块的代码：git submodule update</p>',98),o=[e];function n(c,i,r,h,C,d){return a(),p("div",null,o)}const u=s(t,[["render",n]]);export{g as __pageData,u as default};

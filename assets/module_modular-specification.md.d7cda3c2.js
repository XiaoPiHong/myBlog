import{_ as a,o as e,c as i,X as t}from"./chunks/framework.af6290ec.js";const m=JSON.parse('{"title":"模块化的相关规范","description":"","frontmatter":{},"headers":[],"relativePath":"module/modular-specification.md","filePath":"module/modular-specification.md"}'),r={name:"module/modular-specification.md"},l=t('<h1 id="模块化的相关规范" tabindex="-1">模块化的相关规范 <a class="header-anchor" href="#模块化的相关规范" aria-label="Permalink to &quot;模块化的相关规范&quot;">​</a></h1><h2 id="_1-模块化概述" tabindex="-1">1.模块化概述： <a class="header-anchor" href="#_1-模块化概述" aria-label="Permalink to &quot;1.模块化概述：&quot;">​</a></h2><p>传统开发模式的主要问题 ：</p><ul><li>命名冲突（多个 js 文件之间，如果存在重名的变量，会发生变量覆盖问题）</li><li>文件依赖（js 文件之间无法实现相互引用）</li></ul><p>通过模块化解决上述问题：</p><ul><li>模块化就是把单独的一个功能封装到一个模块（文件）中，模块之间相互隔离，但是可以通过特定的接口公开内部成员，也可以依赖别的模块</li><li>模块化开发的好处：方便代码的重用，从而提升开发效率，并且方便后期的维护</li></ul><h2 id="_2-浏览器端的模块化规范" tabindex="-1">2.浏览器端的模块化规范： <a class="header-anchor" href="#_2-浏览器端的模块化规范" aria-label="Permalink to &quot;2.浏览器端的模块化规范：&quot;">​</a></h2><ol><li>AMD Require.js (<a href="http://www.requirejs.cn/" target="_blank" rel="noreferrer">http://www.requirejs.cn/</a>)</li><li>CMD Sea.js (<a href="https://seajs.github.io/seajs/docs/" target="_blank" rel="noreferrer">https://seajs.github.io/seajs/docs/</a>)</li></ol><p><strong>注意：上面的都落伍了，已经有新的解决方案！（ES6 模块化规范）</strong></p><h2 id="_3-服务器端的模块化规范" tabindex="-1">3.服务器端的模块化规范： <a class="header-anchor" href="#_3-服务器端的模块化规范" aria-label="Permalink to &quot;3.服务器端的模块化规范：&quot;">​</a></h2><p><strong>node 中的 CommonJS 规范：</strong></p><ol><li>模块分为 单文件模块 与 包</li><li>模块成员导出：module.exports 和 exports</li><li>模块成员导入：require(&#39;模块标识符&#39;)</li></ol><h2 id="_4-大一统的模块化规范-–-es6-模块化" tabindex="-1">4.大一统的模块化规范 – ES6 模块化： <a class="header-anchor" href="#_4-大一统的模块化规范-–-es6-模块化" aria-label="Permalink to &quot;4.大一统的模块化规范 – ES6 模块化：&quot;">​</a></h2><p>在 ES6 模块化规范诞生之前，Javascript 社区已经尝试并提出了 AMD、CMD、CommonJS 等模块化规范，但是，这些社区提出的模块化标准，还是存在一定的差异性与局限性、并不是浏览器与服务器通用的模块化标准，例如：</p><ul><li>AMD 和 CMD 适用于浏览器端的 Javascript 模块化</li><li>CommonJS 适用于服务器端的 Javascript 模块化</li></ul><p>因此，ES6 语法规范中，在语言层面上定义了 ES6 模块化规范，是浏览器端与服务器端通用的模块化开发规范。</p><p><strong>ES6 模块化规范中定义：</strong></p><ul><li>每个 js 文件都是一个独立的模块</li><li>导入模块成员使用 import 关键字</li><li>暴露模块成员使用 export 关键字</li></ul>',18),o=[l];function s(n,c,p,d,h,u){return e(),i("div",null,o)}const f=a(r,[["render",s]]);export{m as __pageData,f as default};

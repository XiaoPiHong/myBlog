import{_ as s,o as a,c as n,X as e}from"./chunks/framework.af6290ec.js";const A=JSON.parse('{"title":"自定义 docker 镜像","description":"","frontmatter":{},"headers":[],"relativePath":"server/server-docker-image.md","filePath":"server/server-docker-image.md"}'),o={name:"server/server-docker-image.md"},l=e(`<h1 id="自定义-docker-镜像" tabindex="-1">自定义 docker 镜像 <a class="header-anchor" href="#自定义-docker-镜像" aria-label="Permalink to &quot;自定义 docker 镜像&quot;">​</a></h1><p>下面我以 <a href="https://www.ruanyifeng.com/blog/2017/08/koa.html" target="_blank" rel="noreferrer">koa-demos</a> 项目为例，介绍怎么写 Dockerfile 文件，实现让用户在 Docker 容器里面运行 Koa 框架。</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">clone</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">https://github.com/ruanyf/koa-demos.git</span></span>
<span class="line"><span style="color:#82AAFF;">cd</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">koa-demos</span></span></code></pre></div><p>作为准备工作，请先<a href="https://codeload.github.com/ruanyf/koa-demos/zip/refs/heads/master" target="_blank" rel="noreferrer">下载源码</a>。</p><h2 id="编写-dockerfile-文件" tabindex="-1">编写 Dockerfile 文件 <a class="header-anchor" href="#编写-dockerfile-文件" aria-label="Permalink to &quot;编写 Dockerfile 文件&quot;">​</a></h2><p>首先，在项目的根目录下，新建一个文本文件<code>.dockerignore</code>，写入下面的内容。</p><div class="language-txt"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">.git</span></span>
<span class="line"><span style="color:#A6ACCD;">node_modules</span></span>
<span class="line"><span style="color:#A6ACCD;">npm-debug.log</span></span></code></pre></div><p>上面代码表示，这三个路径要排除，不要打包进入 image 文件。如果你没有路径要排除，这个文件可以不新建。</p><p>然后，在项目的根目录下，新建一个文本文件 Dockerfile，写入下面的内容。</p><div class="language-txt"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">FROM node:8.4</span></span>
<span class="line"><span style="color:#A6ACCD;">COPY . /app</span></span>
<span class="line"><span style="color:#A6ACCD;">WORKDIR /app</span></span>
<span class="line"><span style="color:#A6ACCD;">RUN npm install --registry=https://registry.npm.taobao.org</span></span>
<span class="line"><span style="color:#A6ACCD;">EXPOSE 3000</span></span></code></pre></div><p>上面代码一共五行，含义如下。</p><ul><li>FROM node:8.4：该 image 文件继承官方的 node image，冒号表示标签，这里标签是 8.4，即 8.4 版本的 node。</li><li>COPY . /app：将当前目录下的所有文件（除了.dockerignore 排除的路径），都拷贝进入 image 文件的/app 目录。</li><li>WORKDIR /app：指定接下来的工作路径为/app。</li><li>RUN npm install：在/app 目录下，运行 npm install 命令安装依赖。注意，安装后所有的依赖，都将打包进入 image 文件。</li><li>EXPOSE 3000：将容器 3000 端口暴露出来， 允许外部连接这个端口。</li></ul><h2 id="创建-image-文件" tabindex="-1">创建 image 文件 <a class="header-anchor" href="#创建-image-文件" aria-label="Permalink to &quot;创建 image 文件&quot;">​</a></h2><p>有了 Dockerfile 文件以后，就可以使用 <code>docker image build</code> 命令创建 image 文件了。</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">image</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">build</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-t</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">koa-demo</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">#或者</span></span>
<span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">image</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">build</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-t</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">koa-demo:0.0.1</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">.</span></span></code></pre></div><p>上面代码中，<code>-t</code> 参数用来指定 image 文件的名字，后面还可以用冒号指定标签。如果不指定，默认的标签就是 <code>latest</code>。最后的那个点表示 Dockerfile 文件所在的路径，上例是当前路径，所以是一个点。</p><p>如果运行成功，就可以看到新生成的 image 文件 <code>koa-demo</code> 了。</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">image</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">ls</span></span></code></pre></div><h2 id="生成容器" tabindex="-1">生成容器 <a class="header-anchor" href="#生成容器" aria-label="Permalink to &quot;生成容器&quot;">​</a></h2><p><code>docker container run</code> 命令会从 image 文件生成容器。</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">container</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">run</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-p</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">8000</span><span style="color:#C3E88D;">:3000</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-it</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">koa-demo</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/bin/bash</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 或者</span></span>
<span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">container</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">run</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-p</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">8000</span><span style="color:#C3E88D;">:3000</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-it</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">koa-demo:0.0.1</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/bin/bash</span></span></code></pre></div><p>上面命令的各个参数含义如下：</p><ul><li>-p 参数：容器的 3000 端口映射到本机的 8000 端口。</li><li>-it 参数：容器的 Shell 映射到当前的 Shell，然后你在本机窗口输入的命令，就会传入容器。</li><li>koa-demo:0.0.1：image 文件的名字（如果有标签，还需要提供标签，默认是 latest 标签）。</li><li>/bin/bash：容器启动以后，内部第一个执行的命令。这里是启动 Bash，保证用户可以使用 Shell。</li></ul><p>如果一切正常，运行上面的命令以后，就会返回一个命令行提示符。</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">root@66d80f4aaf1e:/app#</span></span></code></pre></div><p>这表示你已经在容器里面了，返回的提示符就是容器内部的 Shell 提示符。执行下面的命令。</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">root@66d80f4aaf1e:/app#</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">node</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">demos/01.js</span></span></code></pre></div><p>这时，Koa 框架已经运行起来了。打开本机的浏览器，访问 <a href="http://127.0.0.1:8000" target="_blank" rel="noreferrer">http://127.0.0.1:8000</a>，网页显示&quot;Not Found&quot;，这是因为这个 <a href="https://github.com/ruanyf/koa-demos/blob/master/demos/01.js" target="_blank" rel="noreferrer">demo</a> 没有写路由。</p><p>这个例子中，Node 进程运行在 Docker 容器的虚拟环境里面，进程接触到的文件系统和网络接口都是虚拟的，与本机的文件系统和网络接口是隔离的，因此需要定义容器与物理机的端口映射（map）。</p><p>现在，在容器的命令行，按下 Ctrl + c 停止 Node 进程，然后按下 Ctrl + d （或者输入 exit）退出容器。此外，也可以用 <code>docker container kill</code> 终止容器运行。</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># 在本机的另一个终端窗口，查出容器的 ID</span></span>
<span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">container</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">ls</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 停止指定的容器运行</span></span>
<span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">container</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">kill</span><span style="color:#A6ACCD;"> [containerID]</span></span></code></pre></div><p>也可以使用 <code>docker container run</code> 命令的<code>--rm</code> 参数，在容器终止运行后自动删除容器文件。</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">container</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">run</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--rm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-p</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">8000</span><span style="color:#C3E88D;">:3000</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-it</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">koa-demo</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/bin/bash</span></span></code></pre></div><h2 id="cmd-命令" tabindex="-1">CMD 命令 <a class="header-anchor" href="#cmd-命令" aria-label="Permalink to &quot;CMD 命令&quot;">​</a></h2><p>上一节的例子里面，容器启动以后，需要手动输入命令 <code>node demos/01.js</code>。我们可以把这个命令写在 Dockerfile 里面，这样容器启动以后，这个命令就已经执行了，不用再手动输入了。</p><div class="language-txt"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">FROM node:8.4</span></span>
<span class="line"><span style="color:#A6ACCD;">COPY . /app</span></span>
<span class="line"><span style="color:#A6ACCD;">WORKDIR /app</span></span>
<span class="line"><span style="color:#A6ACCD;">RUN npm install --registry=https://registry.npm.taobao.org</span></span>
<span class="line"><span style="color:#A6ACCD;">EXPOSE 3000</span></span>
<span class="line"><span style="color:#A6ACCD;">CMD node demos/01.js</span></span></code></pre></div><p>上面的 Dockerfile 里面，多了最后一行 <code>CMD node demos/01.js</code>，它表示容器启动后自动执行 <code>node demos/01.js</code>。</p><p>你可能会问，<code>RUN</code> 命令与 <code>CMD</code> 命令的区别在哪里？简单说，<code>RUN</code> 命令在 image 文件的构建阶段执行，执行结果都会打包进入 image 文件；<code>CMD</code> 命令则是在容器启动后执行。另外，一个 Dockerfile 可以包含多个 <code>RUN</code> 命令，但是只能有一个 <code>CMD</code> 命令。</p><p>注意，指定了 <code>CMD</code> 命令以后，<code>docker container run</code> 命令就不能附加命令了（比如前面的<code>/bin/bash</code>），否则它会覆盖 <code>CMD</code> 命令。现在，启动容器可以使用下面的命令。</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">container</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">run</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--rm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-p</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">8000</span><span style="color:#C3E88D;">:3000</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-it</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">koa-demo:0.0.1</span></span></code></pre></div><h2 id="发布-image-文件" tabindex="-1">发布 image 文件 <a class="header-anchor" href="#发布-image-文件" aria-label="Permalink to &quot;发布 image 文件&quot;">​</a></h2><p>容器运行成功后，就确认了 image 文件的有效性。这时，我们就可以考虑把 image 文件分享到网上，让其他人使用。</p><p>首先，去 <a href="https://hub.docker.com/" target="_blank" rel="noreferrer">hub.docker.com</a> 或 <a href="https://hub.docker.com/" target="_blank" rel="noreferrer">cloud.docker.com</a> 注册一个账户。然后，用下面的命令登录。</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">login</span></span></code></pre></div><p>接着，为本地的 image 标注用户名和版本。</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">image</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">tag</span><span style="color:#A6ACCD;"> [imageName] </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">username</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;">/</span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">repository</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;">:</span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">tag</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 实例</span></span>
<span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">image</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">tag</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">koa-demos:0.0.1</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">ruanyf/koa-demos:0.0.1</span></span></code></pre></div><p>也可以不标注用户名，重新构建一下 image 文件。</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">image</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">build</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-t</span><span style="color:#A6ACCD;"> [username]/</span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">repository</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;">:</span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">tag</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">.</span></span></code></pre></div><p>最后，发布 image 文件。</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">image</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">push</span><span style="color:#A6ACCD;"> [username]/</span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">repository</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;">:</span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">tag</span><span style="color:#89DDFF;">]</span></span></code></pre></div><p>发布成功以后，登录 hub.docker.com，就可以看到已经发布的 image 文件。</p><h2 id="参考链接" tabindex="-1">参考链接 <a class="header-anchor" href="#参考链接" aria-label="Permalink to &quot;参考链接&quot;">​</a></h2><p><a href="https://www.ruanyifeng.com/blog/2018/02/docker-tutorial.html" target="_blank" rel="noreferrer">阮一峰的网络日志-Docker 入门教程</a></p>`,53),p=[l];function t(c,r,i,C,d,y){return a(),n("div",null,p)}const h=s(o,[["render",t]]);export{A as __pageData,h as default};
